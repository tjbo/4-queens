// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

function isDimensionOcccupied(d) {
  return Belt_Array.reduce(d, 0, (function (acc, v) {
                return acc + v | 0;
              })) > 0;
}

function isSolution(rows) {
  console.log(rows);
  
}

function isColumnOccupied(rows, columnIndex) {
  return isDimensionOcccupied(Belt_Array.map(rows, (function (row) {
                    return Caml_array.get(row, columnIndex);
                  })));
}

function isDiagonalOccupied(rows, rowIndex, columnIndex, _n) {
  var isCheckTrue = false;
  var i = _n;
  var cursorIndex1 = rowIndex;
  var cursorIndex2 = columnIndex;
  while(!isCheckTrue && i >= 0 && cursorIndex1 > 0 && cursorIndex2 > 0) {
    cursorIndex1 = cursorIndex1 - 1 | 0;
    cursorIndex2 = cursorIndex2 - 1 | 0;
    if (Caml_array.get(Caml_array.get(rows, cursorIndex1), cursorIndex2) === 1) {
      isCheckTrue = true;
    } else {
      i = i - 1 | 0;
    }
  };
  var cursorIndex1$1 = rowIndex;
  var cursorIndex2$1 = columnIndex;
  var j = _n;
  while(!isCheckTrue && j >= 0 && cursorIndex1$1 > 0 && cursorIndex2$1 < (_n - 1 | 0)) {
    cursorIndex1$1 = cursorIndex1$1 - 1 | 0;
    cursorIndex2$1 = cursorIndex2$1 + 1 | 0;
    if (Caml_array.get(Caml_array.get(rows, cursorIndex1$1), cursorIndex2$1) === 1) {
      isCheckTrue = true;
    } else {
      j = j - 1 | 0;
    }
  };
  return isCheckTrue;
}

function placeQueen(_rows, n, firstIndex) {
  var _placeQueen = function (rowIndex, colIndex) {
    var ci = colIndex;
    var nextRow = Caml_array.get(_rows, rowIndex);
    while(n > ci) {
      if (isColumnOccupied(_rows, ci) || isDiagonalOccupied(_rows, rowIndex, ci, n)) {
        ci = ci + 1 | 0;
      } else {
        Caml_array.set(nextRow, ci, 1);
        ci = 9999;
        if ((rowIndex + 1 | 0) < n) {
          _placeQueen(rowIndex + 1 | 0, 0);
        }
        
      }
    };
    
  };
  _placeQueen(0, firstIndex);
  return _rows;
}

function make(n) {
  var range = Belt_Array.range(0, n - 1 | 0);
  return Belt_Array.mapWithIndex(range, (function (i, param) {
                var rows = Belt_Array.map(range, (function (param) {
                        return Belt_Array.map(range, (function (param) {
                                      return 0;
                                    }));
                      }));
                return placeQueen(rows, n, i);
              }));
}

var Board = {
  isDimensionOcccupied: isDimensionOcccupied,
  isSolution: isSolution,
  isRowOccupied: isDimensionOcccupied,
  isColumnOccupied: isColumnOccupied,
  isDiagonalOccupied: isDiagonalOccupied,
  placeQueen: placeQueen,
  make: make
};

var r = make(5);

console.log(r);

console.log((console.log(r), undefined));

exports.Board = Board;
exports.r = r;
/* r Not a pure module */
